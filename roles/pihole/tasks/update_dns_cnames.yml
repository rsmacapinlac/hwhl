- name: Check which service's CNAME record exists
  delegate_to: localhost
  ansible.builtin.stat:
    path: "{{ item.src }}"
  register: file_status
  loop:
    - { src: "{{ playbook_dir }}/files/dns/cname/05-pihole.conf", dest: "05-pihole.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-traefik.conf", dest: "05-traefik.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-portainer.conf", dest: "05-portainer.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-wg-easy.conf", dest: "05-wg-easy.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-duplicati.conf", dest: "05-duplicati.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-plex.conf", dest: "05-plex.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-tautulli.conf", dest: "05-tautulli.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-arrs.conf", dest: "05-arrs.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-overseer.conf", dest: "05-overseer.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-paperless-ng.conf", dest: "05-paperless-ng.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-homepage.conf", dest: "05-homepage.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-tubearchivist.conf", dest: "05-tubearchivist.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-traggo.conf", dest: "05-traggo.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-obsidian.conf", dest: "05-obsidian.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-freshrss.conf", dest: "05-freshrss.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-linkding.conf", dest: "05-linkding.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-semaphore.conf", dest: "05-semaphore.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-ghostfolio.conf", dest: "05-ghostfolio.conf" }
    - { src: "{{ playbook_dir }}/files/dns/cname/05-homeassistant.conf", dest: "05-homeassistant.conf" }

- name: Copy files if they exist
  become: true
  ansible.builtin.copy:
    src: "{{ item.item.src }}"
    dest: "/data/containers/pihole/etc-dnsmasq.d/{{ item.item.dest }}"
  loop: "{{ file_status.results }}"
  when: item.stat.exists

- name: Restart PiHole
  command:
    cmd: "docker compose -f /data/services/pihole.yml restart"
  ignore_errors: true
