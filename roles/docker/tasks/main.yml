- name: Check if Docker is already installed
  stat:
    path: /usr/bin/docker
  register: docker_installed

- name: Install dependencies
  become: yes
  apt:
    name: "{{item}}"
    state: present
    update_cache: yes
  loop:
    - ca-certificates
    - curl
    - gnupg
  when: not docker_installed.stat.exists

- name: Remove python-configparser package
  become: yes
  apt:
    name: python-configparser
    state: absent
  when: not docker_installed.stat.exists

- name: Get docker convenience script
  get_url:
    url: https://get.docker.com
    dest: /tmp/get-docker.sh
    mode: '0755'
  when: not docker_installed.stat.exists

- name: Install Docker using convenience script
  shell: sh /tmp/get-docker.sh
  args:
    creates: /usr/bin/docker
  when: not docker_installed.stat.exists
  notify: restart docker

- name: Install Docker packages
  become: yes
  apt:
    name: "{{item}}"
    state: latest
    update_cache: yes
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - docker-buildx-plugin
    - docker-compose-plugin
  when: not docker_installed.stat.exists
  notify: restart docker

- name: Create "docker" group
  become: yes
  group:
    name: "docker"
    state: present
  when: not docker_installed.stat.exists

- name: Add "ansible" user to "docker" group
  become: yes
  user:
    name: "ansible"
    groups: "docker"
    append: yes
  when: not docker_installed.stat.exists
  notify: reset connection

- name: Reset ssh connection to allow ansible user to be reset
  ansible.builtin.meta:
    reset_connection

- name: Create services directory
  become: yes
  file:
    path: /data/services
    state: directory
    owner: ansible
    group: docker
    mode: '0755'
  when: not docker_installed.stat.exists

- name: Create the 'proxy' network
  community.docker.docker_network:
    name: proxy
  when: not docker_installed.stat.exists

